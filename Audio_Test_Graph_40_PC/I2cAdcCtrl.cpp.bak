#include "stdafx.h"
#include "DATsys.h"
#include "parser.h"
#include "step.h"
#include "global.h"
#include "realmeas.h"
#include "support.h"
#include "CommThread.h"
#include "I2cAdcCtrl.h"

CI2cAdcCtrl I2cAdcCtrl;

extern CDATsysView * g_pView;
extern CString sAppDir;

CI2cAdcCtrl::CI2cAdcCtrl()
{
	m_bPortOpen				= FALSE;
	m_nPortID				= -1;
	m_strErrMsg				= _T("");
	m_szI2cAdcReadString	= _T("");
	m_nI2cAdcSeqNo			= 0;
	m_nData1				= 0;
	m_nData2				= 0;
	m_nData3				= 0;

	//+add kwmoon 080804
	m_nReadByte				= 0;

	//+add kwmoon 080826
	memset(m_aReadData,256,0);
	memset(m_aWriteData,256,0);

	m_szCurrentStatusMsg = _T("");
}

CI2cAdcCtrl::~CI2cAdcCtrl()
{
}

void CI2cAdcCtrl::ClearI2cAdcData()
{
	m_szI2cAdcReadString	= _T("");
	m_nI2cAdcSeqNo			= 0;
	m_nData1				= 0;
	m_nData2				= 0;
	m_nData3				= 0;
}

BOOL CI2cAdcCtrl::Create(CString sComPort, DWORD nBaudRate)
{
	CString sTmp = sComPort;
	sTmp.Delete(0, 3);

	m_nPortID = atoi(sTmp);

	m_strErrMsg = _T("");

	if( !m_ctrlI2cAdcCtrl.OpenPort( sComPort, nBaudRate, m_nPortID, FALSE) )
	{
		m_strErrMsg.Format("[I2C ADC CommPort] \n%s Init Failed!", sComPort);
		m_bPortOpen = FALSE;
		return FALSE;
	}
	else m_bPortOpen = TRUE;

	_Wait(150);

	return TRUE;
}

void CI2cAdcCtrl::PortClose()
{
	m_ctrlI2cAdcCtrl.ClosePort();
	m_bPortOpen = FALSE;
}

BOOL CI2cAdcCtrl::Init()
{
	//+change kwmoon 080919
//	memset(m_strReceive, 0, 225);
	memset(m_strReceive, 0, 1024);
	return TRUE;
}

//+change kwmoon 080804
int CI2cAdcCtrl::ReceiveCommString(int nRev, unsigned nWaitLimit, CString& sReadString)
{
	if(m_bPortOpen == FALSE)
	{
		return ERROR_PORT_NOT_OPEN;
	}

	int			nReadQueueSize = 0;

	DWORD		dwRead;		 
	BYTE		Buffer;
	char		ReadBuffer[2048];	

	CString szString = _T("");

	if(!m_bPortOpen) return FALSE;

	memset(ReadBuffer,   0, 2048);
	//+change kwmoon 080919
//	memset(m_strReceive, 0, 225);
	memset(m_strReceive, 0, 1024);

//	nWaitLimit = atoi(sWaitLimit);
	
	DWORD dwStartTick = GetTickCount();

	m_ctrlI2cAdcCtrl.m_QueueRead.Clear();

	while (TRUE)
	{
		while(TRUE)
		{
			dwRead = m_ctrlI2cAdcCtrl.ReadComm( ReadBuffer, 2048);

			if (dwRead == 0) break;
				
			nReadQueueSize = m_ctrlI2cAdcCtrl.m_QueueRead.GetSize();

			if (BUFF_SIZE - nReadQueueSize > (int)dwRead)
			{
				for ( WORD i = 0; i < dwRead; i++)
				{
					m_ctrlI2cAdcCtrl.m_QueueRead.PutByte(ReadBuffer[i]);
				}
			}
			else
			{
				return ERROR_I2C_READ_BUFFER_FULL;
			}

			if((GetTickCount() - dwStartTick) > nWaitLimit)		
			{
				m_ctrlI2cAdcCtrl.m_QueueRead.Clear();
				return ERROR_I2C_READ_TIMEOUT;
			}

			if(CurrentSet->bRunAbort)
			{
				m_ctrlI2cAdcCtrl.m_QueueRead.Clear();
				return ERROR_I2C_USER_STOP;
			}

			if(m_ctrlI2cAdcCtrl.m_QueueRead.GetSize() >= nRev)
			{
				break;			
			}
			Sleep(10);
		}

		int rrv = m_ctrlI2cAdcCtrl.m_QueueRead.GetSize();
		
		if((rrv >0) && (rrv <= nRev))
		{
			for(int i=0; i<nRev; i++)
			{
				m_ctrlI2cAdcCtrl.m_QueueRead.GetByte(&Buffer);
				m_strReceive[i] = Buffer;
			}
			sReadString.Format("%s", m_strReceive);

			if(CurrentSet->bCommDisplay)
			{
				szString.Format("Receive : %s",m_strReceive);

				//+add kwmoon 080826
				m_szCurrentStatusMsg.Format("=> Receive : %s",m_strReceive);

				AddStringToStatus(szString);
			}
			//+change kwmoon 080804
		//	return TRUE;
			return TEST_PASS;
		}

		if((GetTickCount() - dwStartTick) > nWaitLimit)		
		{	
			m_ctrlI2cAdcCtrl.m_QueueRead.Clear();
			return ERROR_I2C_READ_TIMEOUT;
		}
		
		if(CurrentSet->bRunAbort)
		{
			m_ctrlI2cAdcCtrl.m_QueueRead.Clear();
			return ERROR_I2C_USER_STOP;
		}
		Sleep(10);
	}

	//+change kwmoon 080804
//	return TRUE;	
	return TEST_PASS;
}

int CI2cAdcCtrl::SendI2cCmd(CString szCmdString)
{
	if(m_bPortOpen == FALSE)
	{
		return ERROR_PORT_NOT_OPEN;
	}

	if(!SendCommString(szCmdString))
	{
		if(!SendCommString(szCmdString))
		{
			return ERROR_I2C_SEND;
		}
	}

	if(CurrentSet->bCommDisplay)
	{
		AddStringToStatus("I2C-ADC : " + szCmdString);
	}

	return TEST_PASS;
}

BOOL CI2cAdcCtrl::SendCommString(CString str)
{
	m_ctrlI2cAdcCtrl.m_QueueRead.Clear();

	int nRtn = 0;
	
	nRtn = m_ctrlI2cAdcCtrl.WriteComm((char*)(LPCTSTR)str, str.GetLength());
	
	if(nRtn != str.GetLength()) return FALSE;

	return TRUE;
}

int CI2cAdcCtrl::SetI2cClkSpeed(int nClkSpeed)
{
	CString szCmd		= _T("");
	CString sReadString = _T("");
	int nResult			= TEST_FAIL;

	if((nClkSpeed < 0) || (nClkSpeed > 3))
	{
		return ERROR_I2C_CLK_RANGE;
	}

	szCmd.Format(">%02x4002%02x0000%c%c",m_nI2cAdcSeqNo++,nClkSpeed+1,CR,LF);

	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("Set I2C Clock : Type %d \t\t Send :  %s",nClkSpeed+1,szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);

	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return ERROR_I2C_RECEIVE;
	}
	else
	{
		if(sReadString.Mid(1,6).Compare(szCmd.Mid(1,6)) != NULL)
		{
			return ERROR_I2C_RESPONSE;
		}
	}
	return TEST_PASS;
}

//+add kwmoon 080724
int CI2cAdcCtrl::SetI2cPacketDelay(int nDelay)
{
	CString szCmd		= _T("");
	CString sReadString = _T("");
	int nResult			= TEST_FAIL;

	if((nDelay < 0) || (nDelay > 500))
	{
		return ERROR_I2C_PACKET_DELAY_RANGE;
	}

	szCmd.Format(">%02x4001%04x00%c%c",m_nI2cAdcSeqNo++,nDelay,CR,LF);

	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("Set Packet Delay : %d \t\t Send :  %s",nDelay,szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);

	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}
	else
	{
		if(sReadString.Mid(1,10).Compare(szCmd.Mid(1,10)) != NULL)
		{
			return ERROR_I2C_RESPONSE;
		}
	}
	return TEST_PASS;
}

//+add kwmoon 080724
int CI2cAdcCtrl::SetI2cReadByteDelay(int nDelay)
{
	CString szCmd		= _T("");
	CString sReadString = _T("");

	int nResult			= TEST_FAIL;
	
	if((nDelay < 1) || (nDelay > 100))
	{
		return ERROR_I2C_DELAY_RANGE;
	}

	szCmd.Format(">%02x400300%02x00%c%c",m_nI2cAdcSeqNo++,nDelay,CR,LF);

	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("Set Read Delay : %3d \t\t Send :  %s",nDelay,szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);

	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}
	else
	{
		if(sReadString.Mid(1,10).Compare(szCmd.Mid(1,10)) != NULL)
		{
			return ERROR_I2C_RESPONSE;
		}
	}
	return TEST_PASS;
}

//+add kwmoon 080724
int CI2cAdcCtrl::SetI2cWritByteDelay(int nDelay)
{
	CString szCmd		= _T("");
	CString sReadString = _T("");

	int nResult			= TEST_FAIL;

	if((nDelay < 1) || (nDelay > 100))
	{
		return ERROR_I2C_DELAY_RANGE;
	}

	szCmd.Format(">%02x400400%02x00%c%c",m_nI2cAdcSeqNo++,nDelay,CR,LF);

	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("Set Write Delay : %3d \t\t Send :  %s",nDelay,szCmd);
	
	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);

	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}
	else
	{
		if(sReadString.Mid(1,10).Compare(szCmd.Mid(1,10)) != NULL)
		{
			return ERROR_I2C_RESPONSE;
		}
	}
	return TEST_PASS;
}

//+add kwmoon 080804
int CI2cAdcCtrl::WriteI2c2bData()
{
	int		nCmdType	= 0;
	int		nDelay		= 0;
	
	CString sMsg		= _T("");
	CString sTemp		= _T("");
	CString sReadData	= _T("");
	CString szCmd		= _T("");
	CString sReadString = _T("");

	CString szData1, szData2;
	szData1.Format("%02x",m_nData1);
	szData2.Format("%02x",m_nData2);
	
	int		nReadByte = m_nData3;
	int		nResult	  = TEST_FAIL;

	m_szI2cAdcReadString = _T("");

	if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

	szCmd.Format(">%02x12A0%s%s00%c%c",m_nI2cAdcSeqNo++,szData1,szData2,CR,LF);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}
	
	//+del kwmoon 080809
	Sleep(100);

	if((nResult = ReceiveCommString(14,5000,m_szI2cAdcReadString)) != TEST_PASS)
	{
		return nResult;
	}

	//+add kwmoon 080910
	if(m_szI2cAdcReadString == _T(""))
	{
		return ERROR_I2C_RESPONSE;
	}

	if((m_szI2cAdcReadString.GetAt(5) != '0') 
	|| (m_szI2cAdcReadString.GetAt(6) != '1'))
	{
		return ERROR_I2C_RESPONSE;
	}	

	return TEST_PASS;
}

//+add kwmoon 080826
int CI2cAdcCtrl::WriteI2c2bNbyteData(int nByte, CProgressCtrl& Progress)
{
	int		nCmdType	= 0;
	int		nDelay		= 0;
	
	CString sMsg		= _T("");
	CString sTemp		= _T("");
	CString sReadData	= _T("");
	CString szCmd		= _T("");
	CString sReadString = _T("");

	CString szData1, szData2;
	szData1.Format("%02x",m_nData1);
	szData2.Format("%02x",m_nData2);
	
	int		nReadByte = m_nData3;
	int		nResult	  = TEST_FAIL;

	for(int i=0; i<nByte; i++)
	{
		nResult	  = TEST_FAIL;

		m_szI2cAdcReadString = _T("");

		if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

		szData1.Format("%02x",m_nData1+i);
		szData2.Format("%02x",m_aWriteData[i]);

		szCmd.Format(">%02x12A0%s%s00%c%c",m_nI2cAdcSeqNo++,szData1,szData2,CR,LF);

		//+add kwmoon 080826
		m_szCurrentStatusMsg.Format("[2B] Write : Addr:%s Data:%s \t Send :  %s",szData1,szData2,szCmd);

		if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
		{
			return nResult;
		}
		
		//+del kwmoon 080809
	//	Sleep(100);

		if((nResult = ReceiveCommString(14,5000,m_szI2cAdcReadString)) != TEST_PASS)
		{
			return nResult;
		}

		//+add kwmoon 080910
		if(m_szI2cAdcReadString == _T(""))
		{
			return ERROR_I2C_RESPONSE;
		}		
		
		if((m_szI2cAdcReadString.GetAt(5) != '0') 
		|| (m_szI2cAdcReadString.GetAt(6) != '1'))
		{
			return ERROR_I2C_RESPONSE;
		}	

		if(i > 0) Progress.SetPos((int)(((float)i*100/(float)(nByte-1))));
	}

	return TEST_PASS;
}

//+add kwmoon 080804
int CI2cAdcCtrl::ReadI2c2bData()
{
	int		nCmdType	= 0;
	int		nDelay		= 0;
	
	CString sMsg		= _T("");
	CString sTemp		= _T("");
	CString sReadData	= _T("");
	CString szCmd		= _T("");
	CString sReadString = _T("");

	CString szData1, szData2;
	szData1.Format("%02x",m_nData1);
	szData2.Format("%02x",m_nData2);
	
	int	nResult	  = TEST_FAIL;

	m_szI2cAdcReadString = _T("");

	if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

	szCmd.Format(">%02x22A1%s0000%c%c",m_nI2cAdcSeqNo++,szData1,CR,LF);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);
	
	if((nResult = ReceiveCommString(14,3000,m_szI2cAdcReadString)) != TEST_PASS)
	{
		return nResult;
	}

	//================
	// Check Response 
	//================
	//+add kwmoon 080910
	if(m_szI2cAdcReadString == _T(""))
	{
		return ERROR_I2C_RESPONSE;
	}

	if((m_szI2cAdcReadString.GetAt(5) != '0') 
	|| (m_szI2cAdcReadString.GetAt(6) != '1'))
	{
		return ERROR_I2C_RESPONSE;
	}	

	//=======================================
	// Compare Read Data with Expected Value 
	//=======================================
	szData2.MakeUpper();
	m_szI2cAdcReadString.MakeUpper();

	//+add kwmoon 080910
	if(m_szI2cAdcReadString == _T(""))
	{
		return ERROR_I2C_RESPONSE;
	}
	
	if((m_szI2cAdcReadString.GetAt(7) != szData2.GetAt(0)) 
	|| (m_szI2cAdcReadString.GetAt(8) != szData2.GetAt(1)))
	{
		pCurStep->m_bAdcTestResult = FALSE;
		return ERROR_I2C_RESPONSE;
	}

	pCurStep->m_bAdcTestResult = TRUE;
	return TRUE;
}

//+add kwmoon 080826
int CI2cAdcCtrl::ReadI2c2bNbyteData(int nByte, CProgressCtrl& Progress)
{
	int		nCmdType	= 0;
	int		nDelay		= 0;
	
	CString sMsg		= _T("");
	CString sTemp		= _T("");
	CString sReadData	= _T("");
	CString szCmd		= _T("");
	CString sReadString = _T("");

	CString szData1, szData2;
	szData1.Format("%02x",m_nData1);
	szData2.Format("%02x",m_nData2);
	
	int	nResult	  = TEST_FAIL;

	//+add kwmoon 080910
	memset(m_aReadData,256,0);
	
	for(int i=0; i<nByte; i++)
	{
		nResult	  = TEST_FAIL;

		m_szI2cAdcReadString = _T("");

		if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

		szCmd.Format(">%02x22A1%s0000%c%c",m_nI2cAdcSeqNo++,szData1,CR,LF);

		//+add kwmoon 080826
		m_szCurrentStatusMsg.Format("[2B] Read : Addr:%s \t\t Send :  %s",szData1,szCmd);

		if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
		{
			return nResult;
		}

		if((nResult = ReceiveCommString(14,3000,m_szI2cAdcReadString)) != TEST_PASS)
		{
			return nResult;
		}
	
		//+add kwmoon 080910
		if(m_szI2cAdcReadString == _T(""))
		{
			return ERROR_I2C_RESPONSE;
		}

		//+add kwmoon 080910
		if(m_szI2cAdcReadString == _T(""))
		{
			return ERROR_I2C_RESPONSE;
		}
		
		if((m_szI2cAdcReadString.GetAt(5) != '0') 
		|| (m_szI2cAdcReadString.GetAt(6) != '1'))
		{
			return ERROR_I2C_RESPONSE;
		}	

		m_aReadData[i] = hexCstr2decNum(m_szI2cAdcReadString.Mid(7,2));

		szData1.Format("%02x",m_nData1+i+1);

		if(i > 0) Progress.SetPos((int)(((float)i*100/(float)(nByte-1))));
	}

	return TRUE;
}

int CI2cAdcCtrl::CheckI2cValue(int nData1)
{
	int		nCmdType	= 0;
	int		nDelay		= 0;

	CString sMsg		= _T("");
	CString sTemp		= _T("");
	CString sReadData	= _T("");
	CString szCmd		= _T("");
	CString sReadString = _T("");

	//+add kwmoon 080408
	CString szData1;
	szData1.Format("%02x",nData1);
	
	m_nI2cAdcSeqNo = 0;

	if(m_szI2cAdcReadString == _T(""))
	{
		pCurStep->m_bAdcTestResult = FALSE;
		return ERROR_I2C_EMPTY_READ_STRING;
	}

	szData1.MakeUpper();
	m_szI2cAdcReadString.MakeUpper();

	for(int i=0; i<m_nReadByte; i++)
	{
//		if((m_szI2cAdcReadString.GetAt(5+i) != szData1.GetAt(0)) 
//		|| (m_szI2cAdcReadString.GetAt(6+i) != szData1.GetAt(1)))
		if((m_szI2cAdcReadString.GetAt(CMD_LENGTH+i) != szData1.GetAt(0)) 
		|| (m_szI2cAdcReadString.GetAt(CMD_LENGTH+1+i) != szData1.GetAt(1)))
		{
			pCurStep->m_bAdcTestResult = FALSE;
			return ERROR_I2C_RESPONSE;
		}
	}

	pCurStep->m_bAdcTestResult = TRUE;

	return TEST_PASS;
}

int CI2cAdcCtrl::CheckI2cMaxMin(int nTarget,int nMargin)
{
	if(I2cAdcCtrl.m_szI2cAdcReadString == _T(""))
	{
		pCurStep->m_bAdcTestResult = FALSE;
		return ERROR_I2C_EMPTY_READ_STRING;
	}
	
	if(I2cAdcCtrl.m_szI2cAdcReadString.GetLength() < 14)
	{
		pCurStep->m_bAdcTestResult = FALSE;
		return ERROR_I2C_SHORT_READ_STRING;
	}
	
	int nReadData[4]   = {0,0,0,0};
	CString szReadData = _T("");

	
//	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(5),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(6));
	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+1));
	nReadData[0] = hexCstr2decNum(szReadData);

//	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(7),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(8));
	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+2),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+3));
	nReadData[1] = hexCstr2decNum(szReadData);

//	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(9),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(10));
	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+4),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+5));
	nReadData[2] = hexCstr2decNum(szReadData);
	
	int nMaxValue = max(max(nReadData[0],nReadData[1]),nReadData[2]);
	int nMinValue = min(min(nReadData[0],nReadData[1]),nReadData[2]);
	int nDiff	  = nMaxValue - nMinValue; 

	if((nDiff >= (nTarget-nMargin))
	&& (nDiff <= (nTarget+nMargin)))
	{
		return TEST_PASS;
	}
	else
	{
		return TEST_FAIL;
	}
}

int CI2cAdcCtrl::CheckI2cLimit(int nTarget,int nMargin)
{
	int nResultValue = 0;

	if(I2cAdcCtrl.m_szI2cAdcReadString == _T(""))
	{
		pCurStep->m_bAdcTestResult = FALSE;
		return ERROR_I2C_EMPTY_READ_STRING;
	}
	
	if(I2cAdcCtrl.m_szI2cAdcReadString.GetLength() < 14)
	{
		pCurStep->m_bAdcTestResult = FALSE;
		return ERROR_I2C_SHORT_READ_STRING;
	}

	int nReadData[4]   = {0,0,0,0};
	CString szReadData = _T("");

	
//	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(5),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(6));
	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+1));
	nReadData[0] = hexCstr2decNum(szReadData);

//	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(7),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(8));
	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+2),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+3));
	nReadData[1] = hexCstr2decNum(szReadData);

//	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(9),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(10));
	szReadData.Format("%c%c",I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+4),I2cAdcCtrl.m_szI2cAdcReadString.GetAt(CMD_LENGTH+5));
	nReadData[2] = hexCstr2decNum(szReadData);

	int nMaxValue = max(max(nReadData[0],nReadData[1]),nReadData[2]);
	int nMinValue = min(min(nReadData[0],nReadData[1]),nReadData[2]);

	if(abs(nTarget-nMaxValue) - abs(nTarget-nMinValue) >= 0)
	{
		nResultValue = nMaxValue;
	}
	else
	{
		nResultValue = nMinValue;
	}

	if((nResultValue >= nTarget-nMargin)
	&& (nResultValue <= nTarget+nMargin))
	{
		return TEST_PASS;
	}
	else
	{
		return TEST_FAIL;
	}
}

int CI2cAdcCtrl::ReadI2cData()
{
	int		nCmdType	= 0;
	int		nDelay		= 0;
	int		nResult		= TEST_FAIL;
	
	CString sMsg		= _T("");
	CString sTemp		= _T("");
	CString sReadData	= _T("");
	CString szCmd		= _T("");
	CString sReadString = _T("");

	CString szAddress;
	szAddress.Format("%02x",m_nData1);
	
	m_nReadByte			 = m_nData3;
	m_szI2cAdcReadString = _T("");

	//========================
	// Check No of Read Bytes
	//========================
	if((m_nReadByte < 1) || (m_nReadByte > 4))
	{
		return ERROR_I2C_NO_READ_BYTE;
	}

	if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

	//==================
	// Set Page Address
	//==================
	szCmd.Format(">%02x02E7%s0000%c%c",m_nI2cAdcSeqNo++,szAddress,CR,LF);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}
	
	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}
	
	if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

	//=======================
	// Read EEPROM (256 Byte)
	//=======================
	szCmd.Format(">%02x2000000000%c%c",m_nI2cAdcSeqNo++,CR,LF);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}
	
	if((nResult = ReceiveCommString(14,5000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}

	//================
	// Response Check
	//================
	if((sReadString.GetAt(5) != '0') 
	|| (sReadString.GetAt(6) != '1'))
	{
		return ERROR_I2C_RESPONSE;
	}

	//==================
	// Set Byte Address
	//==================

	//+del kwmoon 080918
/*
	int nResultAddress[4] = {0,0,0,0};
	
	for(int i=0; i<m_nReadByte; i++)
	{
		nResultAddress[i] = m_nData2 + i;
	}
*/
	if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

	//=============================
	// Read 4Byte Data From Buffer
	//=============================

	//+change kwmoon 080918
//	szCmd.Format(">%02x30%02x%02x%02x%02x%c%c",m_nI2cAdcSeqNo++,
//				  nResultAddress[0], nResultAddress[1],
//				  nResultAddress[2], nResultAddress[3],CR,LF);

	//+add kwmoon 080918
	int nReadByte = 4;

	szCmd.Format(">%02x30%02x%02x0000%c%c",m_nI2cAdcSeqNo++,m_nData2,(nReadByte-1),CR,LF);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}	
	
	m_szI2cAdcReadString = _T("");

	if((nResult = ReceiveCommString(CMD_LENGTH+nReadByte*2+1,3000,m_szI2cAdcReadString)) != TEST_PASS)
	{
		return nResult;
	}

	return TEST_PASS;
}

//+add kwmoon 080826
int CI2cAdcCtrl::ReadI2cNbyteData(int nByte, CProgressCtrl& Progress)
{
	int		nCmdType	= 0;
	int		nDelay		= 0;
	int		nResult		= TEST_FAIL;
	
	CString sMsg		= _T("");
	CString sTemp		= _T("");
	CString sReadData	= _T("");
	CString szCmd		= _T("");
	CString sReadString = _T("");

	CString szAddress;
	szAddress.Format("%02x",m_nData1);
	
	m_nReadByte			 = m_nData3;
	m_szI2cAdcReadString = _T("");


	//========================
	// Check No of Read Bytes
	//========================
//	if((m_nReadByte < 1) || (m_nReadByte > 4))
//	{
//		return ERROR_I2C_NO_READ_BYTE;
//	}

	if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

	//==================
	// Set Page Address
	//==================
	szCmd.Format(">%02x02E7%s0000%c%c",m_nI2cAdcSeqNo++,szAddress,CR,LF);

	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("[2AB] Set Page Address : %s \t Send :  %s",szAddress,szCmd);
	
	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}
	
	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}
	
	if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

	//=======================
	// Read EEPROM (256 Byte)
	//=======================
	szCmd.Format(">%02x2000000000%c%c",m_nI2cAdcSeqNo++,CR,LF);

	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("[2AB] Store Data To Buffer \t\t Send :  %s",szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}
	
	if((nResult = ReceiveCommString(14,5000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}

	//================
	// Response Check
	//================
	if((sReadString.GetAt(5) != '0') 
	|| (sReadString.GetAt(6) != '1'))
	{
//		return ERROR_I2C_RESPONSE;
	}

	//+add kwmoon 080910
	memset(m_aReadData,256,0);

	//+del kwmoon 080918
/*
	for(int i=0; i<(nByte/4); i++)
	{
		//==================
		// Set Byte Address
		//==================
		int nResultAddress[4] = {0,0,0,0};

		for(int j=0; j<4; j++)
		{
			nResultAddress[j] = m_nData2 + j+i*4;
		}

		if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

		//=============================
		// Read 4Byte Data From Buffer
		//=============================
		szCmd.Format(">%02x30%02x%02x%02x%02x%c%c",m_nI2cAdcSeqNo++,
					  nResultAddress[0], nResultAddress[1],
					  nResultAddress[2], nResultAddress[3],CR,LF);

		//+add kwmoon 080826
		m_szCurrentStatusMsg.Format("[2AB] Read : %02x,%02x,%02x,%02x \t\t Send :  %s",
					 nResultAddress[0],nResultAddress[1],nResultAddress[2],nResultAddress[3],szCmd);
	
		if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
		{
			return nResult;
		}	

		m_szI2cAdcReadString = _T("");

		if((nResult = ReceiveCommString(14,3000,m_szI2cAdcReadString)) != TEST_PASS)
		{
			return nResult;
		}

		m_aReadData[i*4]   = hexCstr2decNum(m_szI2cAdcReadString.Mid(5,2));
		m_aReadData[i*4+1] = hexCstr2decNum(m_szI2cAdcReadString.Mid(7,2));
		m_aReadData[i*4+2] = hexCstr2decNum(m_szI2cAdcReadString.Mid(9,2));
		m_aReadData[i*4+3] = hexCstr2decNum(m_szI2cAdcReadString.Mid(11,2));

		if(i > 0) Progress.SetPos((int)((float)i*100/(float)(nByte/4-1)));
	}
*/

	//+add kwmoon 080918
	if(m_nI2cAdcSeqNo >= 0xff) m_nI2cAdcSeqNo = 0;

	//==============================
	// Read N Byte Data From Buffer
	//==============================
	szCmd.Format(">%02x30%02x%02x0000%c%c",m_nI2cAdcSeqNo++,
				  m_nData2,(nByte-1),CR,LF);

	m_szCurrentStatusMsg.Format("[2AB] Read : %02x + %02x bytes \t\t Send :  %s",
				 m_nData2,nByte,szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}	

	m_szI2cAdcReadString = _T("");

	if((nResult = ReceiveCommString(CMD_LENGTH+nByte*2+1,3000,m_szI2cAdcReadString)) != TEST_PASS)
	{
		return nResult;
	}

	for(int i=0; i<nByte; i++)
	{
		m_aReadData[i]   = hexCstr2decNum(m_szI2cAdcReadString.Mid(CMD_LENGTH+i*2,2));
	}

	return TEST_PASS;
}

//+add kwmoon 080807
int CI2cAdcCtrl::SetDDC2AB()
{
	int nResult = TEST_FAIL;

	CString szCmd		= _T("");
	CString sReadString = _T("");
	
	szCmd.Format(">%02x016E508403%c%c",m_nI2cAdcSeqNo++,CR,LF);
	
	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("[2AB] Set DDC-2AB \t\t Send :  %s",szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);

	nResult = ReceiveCommString(14,3000,sReadString);

	return nResult;
}

//+add kwmoon 080807
int CI2cAdcCtrl::SetChannel(CString szData1)
{
	int nResult = TEST_FAIL;

	CString szCmd		= _T("");
	CString sReadString = _T("");
	
	szCmd.Format(">%02x60%s000000%c%c",m_nI2cAdcSeqNo++,szData1,CR,LF);
		
	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("Set Channel : %s \t\t\t Send :  %s",szData1,szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);

	nResult = ReceiveCommString(14,3000,sReadString);

	return nResult;
}

int CI2cAdcCtrl::SendCmd(CString szData1,CString szData2)
{
	int nResult = TEST_FAIL;

	CString szCmd		= _T("");
	CString sReadString = _T("");
	
	//================
	// SetReg4 ~ Reg7
	//================
	szCmd.Format(">%02x02%s00%s00%c%c",m_nI2cAdcSeqNo++,szData1,szData2,CR,LF);
	
	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("[2AB] Set Command : %s, %s \t Send :  %s",szData1,szData2,szCmd);
	
	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}

	//==============
	// Send Command
	//==============
	szCmd.Format(">%02x1000000000%c%c",m_nI2cAdcSeqNo++,CR,LF);
	
	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("[2AB] Send Command : %s, %s \t Send :  %s",szData1,szData2,szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	if((nResult = ReceiveCommString(14,5000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}

	if((sReadString.GetAt(5) != '0') 
	|| (sReadString.GetAt(6) != '1'))
	{
		nResult = ERROR_I2C_RESPONSE; 
	}
		
	return nResult;
}

/*
//+add kwmoon 080911
int CI2cAdcCtrl::CheckVersion(CString szData1,CString szData2, CString szVersion)
{
	int nResult = TEST_FAIL;

	CString szCmd		= _T("");
	CString sReadString = _T("");
	
	// SetReg4~Reg6
	szCmd.Format(">%02x02%s%s0000%c%c",m_nI2cAdcSeqNo++,szData1,szData2,CR,LF);
	
	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("[2AB] Set Command : %s, %s \t Send :  %s",szData1,szData2,szCmd);
	
	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);

	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}

	// Send Command
	szCmd.Format(">%02x1000000000%c%c",m_nI2cAdcSeqNo++,CR,LF);
	
	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("[2AB] Send Command : %s, %s \t Send :  %s",szData1,szData2,szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	//+del kwmoon 080809
//	Sleep(100);

	if((nResult = ReceiveCommString(14,5000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}

	if((sReadString.GetAt(5) != '0') 
	|| (sReadString.GetAt(6) != '1'))
	{
		nResult = ERROR_I2C_RESPONSE; 
	}
		
	return nResult;
}
*/

int CI2cAdcCtrl::WakeUp()
{
	int nResult = TEST_FAIL;

	CString szCmd		= _T("");
	CString sReadString = _T("");
	
	szCmd.Format(">%02x1100000000%c%c",m_nI2cAdcSeqNo++,CR,LF);
	
	//+add kwmoon 080826
	m_szCurrentStatusMsg.Format("Send WakeUp \t\t\t Send :  %s",szCmd);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	if((nResult = ReceiveCommString(14,3000,sReadString)) != TEST_PASS)
	{
		return nResult;
	}

	if((sReadString.GetAt(5) != '0') 
	|| (sReadString.GetAt(6) != '1'))
	{
		nResult = ERROR_I2C_RESPONSE; 
	}
		
	return nResult;
}

//+add kwmoon 080918
int CI2cAdcCtrl::WriteOption(CString szCmd1,CString szCmd2,CString szData)
{
	int nResult = TEST_FAIL;

	CString szCmd		 = _T("");
	CString szTemp		 = _T("");
	CString szReadString = _T("");
	
	if(szData.GetLength() % 2 == 1)
	{
		szData = "0" + szData;
	}

	int nByte = szData.GetLength() / 2;
	int nCheckSum = 0;

	//==========================
	// 2AB Write Command (0x14)
	//==========================
	szCmd.Format(">%02x14%02x000000%c%c",m_nI2cAdcSeqNo++,nByte,CR,LF);
	
	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	m_szCurrentStatusMsg.Format("[2AB] Set Option : %s, %s \t Data :  %s",szCmd1,szCmd2,szData);

	//====================
	// Calculate Checksum
	//====================
	nCheckSum = 0x6E ^ 0x50 ^ (0x84+nByte) ^ hexCstr2decNum(szCmd1) ^ hexCstr2decNum(szCmd2);

	for(int i=0; i<nByte; i++)
	{
		nCheckSum ^= hexCstr2decNum(szData.Mid(i*2,2));
	}

	//===========
	// Send Data
	//===========
	szCmd.Format("=%02x6E50%02x03%s00%s%s%c%c%c",m_nI2cAdcSeqNo++,0x84+nByte,szCmd1,szCmd2,szData,nCheckSum,CR,LF);

	if((nResult = SendI2cCmd(szCmd)) != TEST_PASS)
	{
		return nResult;
	}

	if((nResult = ReceiveCommString(CMD_LENGTH,5000,szReadString)) != TEST_PASS)
	{
		return nResult;
	}

	if((szReadString.GetAt(5) != '0') 
	|| (szReadString.GetAt(6) != '1'))
	{
		nResult = ERROR_I2C_RESPONSE; 
	}
		
	return nResult;
}

