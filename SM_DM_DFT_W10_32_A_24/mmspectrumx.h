#if !defined(AFX_MMSPECTRUMX_H__43AEC0D2_0798_43AB_89F5_B0C73060C328__INCLUDED_)
#define AFX_MMSPECTRUMX_H__43AEC0D2_0798_43AB_89F5_B0C73060C328__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CMMBevelX;
class CPicture;

/////////////////////////////////////////////////////////////////////////////
// CMMSpectrumX wrapper class

class CMMSpectrumX : public CWnd
{
protected:
	DECLARE_DYNCREATE(CMMSpectrumX)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x21c2a3df, 0xd79c, 0x11d1, { 0x88, 0x18, 0xc1, 0x99, 0x19, 0x8e, 0x97, 0x2 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	long GetBytesPerSpectrum();
	BOOL GetUsebackgroundDIB();
	void SetUsebackgroundDIB(BOOL bNewValue);
	BOOL GetPaletteRealize();
	void SetPaletteRealize(BOOL bNewValue);
	unsigned long GetColor();
	void SetColor(unsigned long newValue);
	BOOL GetShowInfo();
	void SetShowInfo(BOOL bNewValue);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	BOOL GetDrawFreqScale();
	void SetDrawFreqScale(BOOL bNewValue);
	BOOL GetDrawAmpScale();
	void SetDrawAmpScale(BOOL bNewValue);
	BOOL GetDrawGrid();
	void SetDrawGrid(BOOL bNewValue);
	long GetSpace();
	void SetSpace(long nNewValue);
	long GetSpotSpace();
	void SetSpotSpace(long nNewValue);
	long GetSpotHeight();
	void SetSpotHeight(long nNewValue);
	unsigned long GetBar1Color();
	void SetBar1Color(unsigned long newValue);
	unsigned long GetBar2Color();
	void SetBar2Color(unsigned long newValue);
	unsigned long GetBar3Color();
	void SetBar3Color(unsigned long newValue);
	unsigned long GetInactive1Color();
	void SetInactive1Color(unsigned long newValue);
	unsigned long GetInactive2Color();
	void SetInactive2Color(unsigned long newValue);
	unsigned long GetInactive3Color();
	void SetInactive3Color(unsigned long newValue);
	unsigned long GetScaleTextColor();
	void SetScaleTextColor(unsigned long newValue);
	unsigned long GetScaleLineColor();
	void SetScaleLineColor(unsigned long newValue);
	unsigned long GetScaleBackColor();
	void SetScaleBackColor(unsigned long newValue);
	unsigned long GetGridColor();
	void SetGridColor(unsigned long newValue);
	long GetPoint1();
	void SetPoint1(long nNewValue);
	long GetPoint2();
	void SetPoint2(long nNewValue);
	BOOL GetDrawInactive();
	void SetDrawInactive(BOOL bNewValue);
	BOOL GetInactiveDoted();
	void SetInactiveDoted(BOOL bNewValue);
	BOOL GetActiveDoted();
	void SetActiveDoted(BOOL bNewValue);
	long GetMode();
	void SetMode(long nNewValue);
	long GetBitLength();
	void SetBitLength(long nNewValue);
	long GetChannel();
	void SetChannel(long nNewValue);
	long GetSampleRate();
	void SetSampleRate(long nNewValue);
	long GetRefFreq();
	void SetRefFreq(long nNewValue);
	long GetGain();
	void SetGain(long nNewValue);
	long GetFFTLength();
	void SetFFTLength(long nNewValue);
	BOOL GetLogFreq();
	void SetLogFreq(BOOL bNewValue);
	BOOL GetLogAmp();
	void SetLogAmp(BOOL bNewValue);
	long GetKind();
	void SetKind(long nNewValue);
	long GetWindow();
	void SetWindow(long nNewValue);
	long GetDecayMode();
	void SetDecayMode(long nNewValue);
	long GetDecay();
	void SetDecay(long nNewValue);
	long GetVerticalScale();
	void SetVerticalScale(long nNewValue);
	long GetFrequencyScale();
	void SetFrequencyScale(long nNewValue);
	long GetNumPeaks();
	void SetNumPeaks(long nNewValue);
	long GetPeakDelay();
	void SetPeakDelay(long nNewValue);
	long GetPeakSpeed();
	void SetPeakSpeed(long nNewValue);
	BOOL GetDisplayPeak();
	void SetDisplayPeak(BOOL bNewValue);
	long GetBitsPerPixel();
	void SetBitsPerPixel(long nNewValue);
	CMMBevelX GetBevel();
	CPicture GetBackgroundDIB();
	void SetBackgroundDIB(LPDISPATCH newValue);
	long GetOptimalWidth(long aWidth);
	void ForceRescale();
	void ResetData();
	void RefreshPCMData(long lpPCMData);
	void RefreshFFTData(long lpFFTData);
	void RefreshMagnitudeData(long lpMagData);
	void GetPeak(double* Freq, double* Amp, double* AmpDb);
	long GetFFTData();
	double GetFrequencyAtPos(long X, long Y);
	double GetAmplitudeAtPos(long X, long Y);
	long GetBevelExtend();
	long GetCursor();
	void SetCursor(long nNewValue);
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_MMSPECTRUMX_H__43AEC0D2_0798_43AB_89F5_B0C73060C328__INCLUDED_)
